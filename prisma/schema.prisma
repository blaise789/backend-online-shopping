// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}
enum OrderEventStatus{
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}
model User {
  id                     Int        @id @default(autoincrement())
  name                   String     @db.VarChar(191)
  email                  String     @unique @db.VarChar(191)
  password               String
  role                   Role       @default(USER)
  profile                String?
  defaultShippingAddress Int?
  defaultBillingAddress  Int?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  addresses              Address[]
  cartItems              CartItem[]
  orders                 Order[]

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("cart_items")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String     @db.Text
  price       Decimal
  tags        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]
  orderProducts OrderProduct[]
  
  @@map("products")
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  address String
  netAmount Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status OrderEventStatus @default(PENDING)
  products OrderProduct[]
  orderEvents OrderEvent[]
  @@map("orders")
}
model OrderProduct{
    id        Int      @id @default(autoincrement())
  orderId    Int
  productId Int
  product Product @relation(fields: [productId],references: [id])
  order      Order   @relation(fields: [orderId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}
model OrderEvent{
   id        Int      @id @default(autoincrement())
  orderId    Int
  order      Order   @relation(fields: [orderId], references: [id])
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 @@map("order_events")
}
